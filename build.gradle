// Copyright 2023 Google LLC
//
// Licensed under the Apache License, Version 2.0 <LICENSE-APACHE or
// https://www.apache.org/licenses/LICENSE-2.0> or the MIT license
// <LICENSE-MIT or https://opensource.org/licenses/MIT>, at your
// option. This file may not be copied, modified, or distributed
// except according to those terms.


plugins {
	id 'application'
	id "maven-publish"
	id "com.diffplug.spotless" version "6.12.0"
	id 'net.ltgt.errorprone' version "3.1.0"
	id 'com.github.johnrengelman.shadow' version '8.1.1'
}

ext {
	packageName = "kafkaio-multiple-topics"
	javaPackagePath = "com.google.cloud.dataflow.dce"
	appName = "KafkaIoMultipleTopics"
	appVersion = "0.0.1-SNAPSHOT"

	beamVersion = "2.54.0"
	solaceVersion = "10.21.0"
	secretManagerVersion = "2.37.0"
	googleHttpClientVersion = "1.44.1"
	googleApiClientGson = "2.4.0"

	slf4jVersion = "1.7.36"
	junitVersion = "4.13.2"
	hamcrestVersion = "2.2"
	autoValueVersion = '1.10'
	autoServiceVersion = '1.0.1'
	errorProneCoreVersion = '2.26.1'
	testcontainersVersion = '1.19.7'

	googleJavaFormat = '1.15.0'
	confluentRepoURL = "https://packages.confluent.io/maven"
}

repositories {
	mavenCentral()

	maven {  // Apache Snapshots repository
		url "https://repository.apache.org/content/repositories/snapshots/"
	}

	maven {  // For Kafka required packages for Beam Google Cloud IO pkgs
		url confluentRepoURL
	}
}

application {
	mainClass = "${javaPackagePath}.RunPipeline"
	version = appVersion
}

test {
	// JUnit 4.
	useJUnit()
	dependsOn cleanTest
	testLogging.showStandardStreams = true
}

compileJava {
	options.compilerArgs.addAll(['-Xlint:deprecation', '-Xlint:unchecked', '-parameters'])
}



shadowJar {
//	baseName = 'shadow'
	setProperty("zip64", true)
	archiveClassifier = null
	version = version
	mergeServiceFiles()
}

run {
	if (project.hasProperty('args')) {
		args project.args.split('\\s')
	}
}

dependencies {

	// App dependencies.
	implementation "org.apache.beam:beam-sdks-java-core:${beamVersion}"
	runtimeOnly "org.apache.beam:beam-runners-direct-java:${beamVersion}"
	implementation "org.apache.beam:beam-runners-google-cloud-dataflow-java:${beamVersion}"
	implementation "org.apache.beam:beam-sdks-java-io-google-cloud-platform:${beamVersion}"
	implementation "org.apache.beam:beam-sdks-java-io-kafka:${beamVersion}"
	implementation "org.apache.kafka:kafka-clients:3.7.0"
	implementation 'com.google.guava:guava:33.2.0-jre'

	implementation platform('com.google.cloud:libraries-bom:26.39.0')
	implementation 'com.google.cloud:google-cloud-bigquery'



	// For secret manager retrieval of Solace credentials
	implementation "com.google.cloud:google-cloud-secretmanager:${secretManagerVersion}"

	implementation "com.google.http-client:google-http-client:${googleHttpClientVersion}"
	implementation "com.google.api-client:google-api-client-gson:${googleApiClientGson}"


	implementation "org.slf4j:slf4j-jdk14:${slf4jVersion}"

	implementation "com.google.auto.value:auto-value-annotations:${autoValueVersion}"
	annotationProcessor "com.google.auto.value:auto-value:${autoValueVersion}"

	implementation "com.google.auto.service:auto-service-annotations:${autoServiceVersion}"
	annotationProcessor "com.google.auto.service:auto-service:${autoServiceVersion}"

	// Tests dependencies.
	testImplementation "junit:junit:${junitVersion}"
	testImplementation "org.hamcrest:hamcrest:${hamcrestVersion}"
//	testImplementation "org.testcontainers:testcontainers:${testcontainersVersion}"
//	testImplementation "org.testcontainers:solace:${testcontainersVersion}"
	testImplementation "org.apache.beam:beam-sdks-java-test-utils:${beamVersion}"


	implementation 'org.checkerframework:checker-qual:3.42.0'
	errorprone "com.google.errorprone:error_prone_core:${errorProneCoreVersion}"
}

// Package a self-contained jar file.
jar {
	archiveBaseName = packageName
	destinationDirectory = file('build')
	manifest {
		attributes 'Main-Class': "${javaPackagePath}.RunPipeline"
	}
	exclude 'META-INF/*.SF'
	exclude 'META-INF/*.DSA'
	exclude 'META-INF/*.RSA'
	duplicatesStrategy = DuplicatesStrategy.INCLUDE
	from {
		configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
	}
	zip64 true
}


spotless {
	format 'misc', {
		// define the files to apply `misc` to
		target '*.gradle', '*.md', '.gitignore'

		// define the steps to apply to those files
		trimTrailingWhitespace()
		indentWithTabs() // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}

	java {
		target project.fileTree(project.rootDir) {
			include '**/*.java'
			exclude 'build/*'
		}

		// apply a specific flavor of google-java-format
		googleJavaFormat("${googleJavaFormat}").aosp().reflowLongStrings()

		// fix formatting of type annotations
		formatAnnotations()
		// make sure every file has the following copyright header.
		licenseHeader '''/*
 * Copyright $YEAR Google.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'''
	}
}
